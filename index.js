import { Telegraf, Markup } from "telegraf";
import {} from 'dotenv/config'
import express from 'express'
import * as func from './functions.js'
import cors from 'cors'
import fetch from 'cross-fetch'
import 'node-fetch'

const bot = new Telegraf(process.env.BOT_TOKEN);

// global variabls 
let fishJournal = [];
let fishData = {};


const app = express();
app.use(cors())
app.use(express.json())

app.get('/', (req, res) => {
    res.json(fishJournal)
});
app.listen(3000);



bot.start(ctx => {
        try {
            const options = {
                method: 'GET',
                headers: {
                    'X-Yandex-API-Key': `${process.env.YANDEX_API}`
                }
        };
        fetch('https://api.weather.yandex.ru/v2/informers?lat=59.938951&lon=30.315635', options)
            .then(response => response.json())
            .then(data => {
                //console.log(data);
                let weather = {
                    date: data.forecast.date.slice(0, 10).split('-').reverse().join('.'),
                    temp: `${data.forecast.parts[0].temp_avg}‚ÑÉ`,
                    pressure: `${data.forecast.parts[0].pressure_mm} –º–º —Ä—Ç.—Å—Ç–±`,
                    windSpeed: `${data.forecast.parts[0].wind_speed} –º/—Å`,
                    windDir: func.getDirection(data.forecast.parts[0].wind_dir),
                    humidity: `${data.forecast.parts[0].humidity}%`,
                    moonPhase: func.getMoonPhase(data.forecast.moon_code)
                }
                fishData = weather
                // console.log(weather)
                ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è ${ctx.message.first_name ? ctx.message.first_name : '—Ä—ã–±–∞–∫'}\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—áec—Ç–≤–æ —Ä—ã–±—ë—Ö –∑–∞ ${weather.date.slice(0, 10).split('-').reverse().join('.')}:`);
            })
            // End .then
            .catch(err => console.error(err));
        } 
        catch(e){
            console.log(e)
        }
    });

// =========================================================================== Text handlers =============================================================================//

bot.hears(/^\d+$/, ctx => {
        try {
            if(typeof fishData['count'] === "undefined"){
                fishData['count'] = ctx.message.text;
                    ctx.replyWithHTML(`${fishData.count < 3 ? "–ú–¥–∞.. –†—ã–±–∞–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É–¥–∞–ª–∞—Å—å... \n\n–ù–æ —Ç—ã –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –∏ –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –¥–Ω—è!" : "–£—Ö—Ö.. –∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ!\n\n–†—ã–±–∞–ª–∫–∞ —É–¥–∞–ª–∞—Å—å, –ú–æ–ª–æ–¥–µ—Ü! \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –¥–Ω—è!"}`, Markup.inlineKeyboard([
                        [Markup.button.callback('–ö—Ä–∞—Å–Ω—ã–π', 'redMark_btn'), Markup.button.callback('–ñ–µ–ª—Ç—ã–π', 'yellowMark_btn'), Markup.button.callback('–ó–µ–ª–µ–Ω—ã–π', 'greenMark_btn')]
                    ]));
                } 
                else {
                    ctx.reply('–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –∫–æ-–≤–æ —Å–≤–æ–µ–≥–æ —É–ª–æ–≤–∞!\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ü–≤–µ—Ç–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–Ω—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!')
                }
        } 
        catch (error) {
            console.log(error)
        }
    });

bot.hears(/[–∞-—è–ê-–Ø]/, ctx => {
        try {
            if(typeof fishData['description'] === "undefined"){
                fishData['description'] = ctx.message.text;
                    ctx.replyWithHTML(`<b>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è <i><b>${fishData.description}</b></i> –∑–∞–ø–∏—Å–∞–Ω–∞!`, Markup.inlineKeyboard([
                        [Markup.button.callback('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏', 'seeReg')]
                    ]))
                    //console.log(weather);
                    } 
                    else {
                        ctx.replyWithHTML(`–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\n<b>${fishData.date}</b> –≤–≤–æ–¥–∏—Ç—å –Ω–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!`); // –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å 
                    } 
        } 
        catch (error) {
            console.log(error);
        }
    });

// =============================================== btn handlers =====================================================//

bot.action('redMark_btn', async ctx => {
        try {
            await ctx.answerCbQuery()
            if(typeof fishData['colorRating'] === "undefined"){
                fishData['colorRating'] = '#FF0000';
                    await ctx.replyWithHTML(`<b>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n–î–µ–Ω—å –æ—Ü–µ–Ω–µ–Ω –∫–∞–∫ ${func.getNameColor(fishData.colorRating)} –≤–∏–¥–∏–º–æ —Ä—ã–±–∞–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!\n\n–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –≤ —Å–ª–µ–¥—É–π—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`, Markup.inlineKeyboard([
                        [Markup.button.callback('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'seeReg')]
                    ]))
                    //console.log(weather)
                    }
                    else {
                        await ctx.reply('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π –¥–µ–Ω—å!\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!'); // –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å 
                    } 
        } 
        catch (error) {
            console.log(error);
        }
    })
bot.action('yellowMark_btn', async ctx => {
        try {
            await ctx.answerCbQuery()
            if(typeof fishData['colorRating'] === "undefined"){
                fishData['colorRating'] = '#FFFF00';
                    await ctx.replyWithHTML(`<b>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n–î–µ–Ω—å –æ—Ü–µ–Ω–µ–Ω –∫–∞–∫ ${func.getNameColor(fishData.colorRating)} –≤–∏–¥–∏–º–æ —Ä—ã–±–∞–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ä–µ–¥–Ω–µ–Ω—å–∫–∞—è\n\n–ù—É —á—Ç–æ–∂ –±—É–¥–µ–º –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ –ª—É—á—à–µ–µ!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`, Markup.inlineKeyboard([
                        [Markup.button.callback('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'seeReg')]
                    ]))
                    //console.log(weather)
                    } 
                    else {
                        await ctx.reply('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π –¥–µ–Ω—å!\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!'); // –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å 
                    } 
        } 
        catch (error) {
            console.log(error);
        }
    })
bot.action('greenMark_btn', async ctx => {
        try {
            await ctx.answerCbQuery()
            if(typeof fishData['colorRating'] === "undefined"){
                fishData['colorRating'] = '#00FF00';
                    await ctx.replyWithHTML(`<b>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n–î–µ–Ω—å –æ—Ü–µ–Ω–µ–Ω –∫–∞–∫ ${func.getNameColor(fishData.colorRating)} –≤–∏–¥–∏–º–æ —Ä—ã–±–∞–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è —Å—É–ø–µ—Ä—Å–∫–∞—è. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n–¢—ã –ø—Ä–µ–≤–∑–æ—à–µ–ª —Å–∞–º —Å–µ–±—è! –ö–ª–∞—Å—Å!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`, Markup.inlineKeyboard([
                        [Markup.button.callback('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'seeReg')]
                    ]))
                    //console.log(weather)
                    } 
                    else {
                        await ctx.reply('–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π –¥–µ–Ω—å!\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!'); // –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å 
                    } 
        }
        catch (error) {
            console.log(error);
        }
    })
bot.action('seeReg', async ctx=> {
        try {
            await ctx.answerCbQuery()
            if(typeof fishData['description'] === "undefined"){
                fishData['description'] = '–ù–µ—Ç';
            }
            else {
            await ctx.replyWithHTML(`
üìÜ –î–∞—Ç–∞:   ${fishData.date}
‚õÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:    ${fishData.temp}
üì° –î–∞–≤–ª–µ–Ω–∏–µ:   ${fishData.pressure}
üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${fishData.windSpeed}
‚õ≥ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞:  ${fishData.windDir}
üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å:  ${fishData.humidity}
üåë –§–∞–∑–∞ –ª—É–Ω—ã:  ${fishData.moonPhase}
üêü –ö–æ–ª-–≤–æ —É–ª–æ–≤–∞:   ${fishData.count}
‚úÖ –¶–≤–µ—Ç.–æ—Ü–µ–Ω–∫–∞:    ${func.getNameColor(fishData.colorRating)}
üìù –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${typeof fishData.description === "undefined" ? "–ù–µ—Ç" : fishData.description}`, 
                Markup.inlineKeyboard([
                    [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫', 'addReg')]
                ]));
            }
        } 
        catch (error) {
            console.log(error);
            }
    })
bot.action('addReg', async ctx => {
    try {
        ctx.answerCbQuery()
        if(fishJournal.some(item => item.date === `${fishData.date.slice(0, 10).split('-').reverse().join('.')}`)){
            ctx.reply('–ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!');
        }
        else {
            await fishJournal.push(fishData)
            await ctx.replyWithHTML(`–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫. –ñ–¥–µ–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞!`, ctx => {})
        }
    } 
        catch (error) {
            console.log(error);
            }
    });

// =============================================== dwnload fish journal =====================================================//

bot.command('mynotes', async ctx => {
        try {
            await ctx.telegram.sendDocument(ctx.from.id, {
                        source: './index.html',
                        filename: 'index.html'
                    }).catch(function(error){ console.log(error); });

            
            // console.log(JSON.stringify(db))
        }
        catch (error) {
            console.log(error)
        }
    }
);

// –û—Ñ–æ—Ä–º–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å + –µ—â–µ —Ä–∞–∑ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å

bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))

