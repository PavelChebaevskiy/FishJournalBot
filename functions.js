import {} from 'dotenv/config'


// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –ø–æ –±—É–∫–≤–µ–Ω–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º (RU)
export const getDirection = function(d) {
    switch(d){
        case 'nw': 
            return  `–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ`
            break;
        case 'n': 
            return  `–°–µ–≤–µ—Ä–Ω–æ–µ`
            break;
        case 'ne': 
            return  `–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ`
            break;
        case 'e': 
            return  `–í–æ—Å—Ç–æ—á–Ω–æ–µ`
            break;
        case 'se': 
            return  `–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ`
            break;
        case 's': 
            return  `–Æ–∂–Ω–æ–µ`
            break;
        case 'sw': 
            return  `–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ`
            break;
        case 'w': 
            return  `–ó–∞–ø–∞–¥–Ω–æ–µ`
            break;
        case 'c': 
            return  `–®—Ç–∏–ª—å`
            break;
    }
} 

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã (RU)
export const getMoonPhase = function(code) {  
    switch(code){
        case 0: 
            return `–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ`
            break;
        case 1:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 2:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 3:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 4:
            return `–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å`
            break;
        case 5:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 6:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 7:
            return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
            break;
        case 8: 
            return `–ù–æ–≤–æ–ª—É–Ω–∏–µ`
            break;
        case 9:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
            break;
        case 10:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
            break;
        case 11:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
                break;
        case 12:
            return `–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å`
            break;
        case 13:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
            break;
        case 14:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
            break;
        case 15:
            return `–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞`
            break;
        }
} 

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–ª–µ–Ω–∏—è —Ü—ã–µ—Ç–∞ –ø–æ HEX –∫–æ–¥—É (RU)
export const getNameColor = function(code){
    switch (code) {
        case '#FF0000':
            return `–ö—Ä–∞—Å–Ω—ã–π üíî`
            break;
        case '#FFFF00':
            return `–ñ–µ–ª—Ç—ã–π üíõ`
            break;
        case '#00FF00':
            return `–ó–µ–ª–µ–Ω—ã–π üíö`
            break;
        default: 
            return `gegewp`
            break;
    }
}


// module.exports.getDirection = function(d) {
//     if (typeof d !== 'number' || isNaN(d)) {
//         return -1;
//     }

//     // keep within the range: 0 <= d < 360
    
//     if (11.25 <= d && d < 33.75) {
//         return "–°–µ–≤–µ—Ä, –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (33.75 <= d && d < 56.25) {
//         return "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (56.25 <= d && d < 78.75) {
//         return "–í–æ—Å—Ç–æ–∫, –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (78.75 <= d && d < 101.25) {
//         return "–í–æ—Å—Ç–æ–∫";
//     } else if (101.25 <= d && d < 123.75) {
//         return "–í–æ—Å—Ç–æ–∫, –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (123.75 <= d && d < 146.25) {
//         return "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (146.25 <= d && d < 168.75) {
//         return "–Æ–≥, –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫";
//     } else if (168.75 <= d && d < 191.25) {
//         return "–Æ–≥";
//     } else if (191.25 <= d && d < 213.75) {
//         return "–Æ–≥, –Æ–≥–æ-–∑–∞–ø–∞–¥";
//     } else if (213.75 <= d && d < 236.25) {
//         return "–Æ–≥–æ-–∑–∞–ø–∞–¥";
//     } else if (236.25 <= d && d < 258.75) {
//         return "–ó–∞–ø–∞–¥, –Æ–≥–æ-–∑–∞–ø–∞–¥";
//     } else if (258.75 <= d && d < 281.25) {
//         return "–ó–∞–ø–∞–¥";
//     } else if (281.25 <= d && d < 303.75) {
//         return "–ó–∞–ø–∞–¥, –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥";
//     } else if (303.75 <= d && d < 326.25) {
//         return "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥";
//     } else if (326.25 <= d && d < 348.75) {
//         return "–°–µ–≤–µ—Ä, –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥";
//     } else {
//         return "–°–µ–≤–µ—Ä";
//     }
// };

// module.exports.getMoonPhase = function(year, month, day) // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã (RU)
// {
//     var c = e = jd = b = 0;
//     if (month < 3) {
//         year--;
//         month += 12;
//     }
//     ++month;
//     c = 365.25 * year;
//     e = 30.6 * month;
//     jd = c + e + day - 694039.09; //jd is total days elapsed
//     jd /= 29.5305882; //divide by the moon cycle
//     b = parseInt(jd); //int(jd) -> b, take integer part of jd
//     jd -= b; //subtract integer part to leave fractional part of original jd
//     b = Math.round(jd * 8); //scale fraction from 0-8 and round
//     if (b >= 8 ) {
//         b = 0; //0 and 8 are the same so turn 8 into 0
//     }
//     switch(b){
//         case 0: 
//             return `–ù–æ–≤–æ–ª—É–Ω–∏–µ`
//             break;
//         case 1:
//             return `–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞`
//             break;
//         case 2:
//             return `–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å`
//             break;
//         case 3:
//             return `–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
//             break;
//         case 4:
//             return `–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ`
//             break;
//         case 5:
//             return `–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞`
//             break;
//         case 6:
//             return `–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å`
//             break;
//         case 7:
//             return `–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞`
//     }

//     // 0 => –ù–æ–≤–æ–ª—É–Ω–∏–µ
//     // 1 => –ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞
//     // 2 => –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å
//     // 3 => –ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞
//     // 4 => –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ
//     // 5 => –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞
//     // 6 => –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å
//     // 7 => –°—Ç–∞—Ä–∞—è –ª—É–Ω–∞
// }

export const sendData = async (url, data) => {
    const response = await fetch(url, {
        method: 'POST',
        body: JSON.stringify(data),
    })

    if(!response.ok){
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É ${url}, —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ ${response}`)
    }

    return await response.json()
}

export const pushData = (arr, data) => {
    arr.push(data)
}

export const putBinData = (req, data) => {
    req.open("PUT", `https://api.jsonbin.io/v3/b/${process.env.BIN_TOKEN}`, true);
    req.setRequestHeader("Content-Type", "application/json");
    req.setRequestHeader("X-Master-Key", `${process.env.BASE_TOKEN}`);
    req.send(JSON.stringify(data));
}
